"""
Django settings for AiInterviewAgent project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
from dotenv import load_dotenv

# 加载 .env 文件
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# 邮箱设置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# 邮件控制台模式，方便测试
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_PORT = int(os.getenv('EMAIL_PORT'))
EMAIL_USE_SSL = os.getenv('EMAIL_USE_SSL', 'False').lower() == 'true'
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'False').lower() == 'true'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')
FRONTEND_URL = os.getenv('FRONTEND_URL')
MEDIASOUP_SERVER_URL = os.getenv('MEDIASOUP_SERVER_URL')
SERVER_PORT = os.getenv('SERVER_PORT', '5000')
# Application definition

INSTALLED_APPS = [
    "daphne",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt',
    'channels',
    'rest_framework_simplejwt.token_blacklist',
    # 添加应用模块
    "user_manager",
    "interview_manager",
    "evaluation_system",
]

# 默认的 JWTAuthentication 会尝试验证所有请求的 Token，但不会主动拒绝请求。
# 真正的拦截逻辑由权限类控制，IsLoggedInOrExempt 权限类已经能够实现所需的白名单机制，因此可以直接与默认认证类配合使用
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication', #拦截请求
    ],
    # 'DEFAULT_PERMISSION_CLASSES': [
    #     'user_manager.permissions.IsLoggedInOrExempt',  # 使用自定义权限类
    # ]
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),   # 访问令牌有效期30分钟
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),     # 刷新令牌有效期1天
    "ROTATE_REFRESH_TOKENS": True,                   # 刷新时生成新的刷新令牌
    "BLACKLIST_AFTER_ROTATION": True,                # 旧令牌加入黑名单
    "ALGORITHM": "HS256",                            # 签名算法
    "SIGNING_KEY": os.getenv('SIGNING_KEY'),         # 签名密钥
    "AUTH_HEADER_TYPES": ("Bearer",),                # 认证头类型
}

MIDDLEWARE = [

    'corsheaders.middleware.CorsMiddleware', #跨域
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]




# 指定用户模型
AUTH_USER_MODEL = 'user_manager.User'

ROOT_URLCONF = "AiInterviewAgent.urls"
CORS_ALLOW_ALL_ORIGINS = True  # 允许所有域名进行跨域请求
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'templates'],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# WSGI_APPLICATION = "AiInterviewAgent.wsgi.application"
ASGI_APPLICATION = "AiInterviewAgent.asgi.application"
# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        'ENGINE': 'django.db.backends.postgresql',
        "NAME": os.getenv('DATABASE_NAME'),
        'USER': os.getenv('DATABASE_USER'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD'),
        'HOST': os.getenv('DATABASE_HOST'),
        'PORT': os.getenv('DATABASE_PORT'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# settings.py
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {  # 输出到控制台
            'class': 'logging.StreamHandler',
        },
        'file': {  # 输出到文件
            'class': 'logging.FileHandler',
            'filename': 'logs/django.log',  # 日志文件路径
        },
    },
    'loggers': {
        'django': {  # Django框架本身的日志
            'handlers': ['console', 'file'],
            'level': 'INFO',
        },
        'client_media_manager': {  # 你的应用专属日志（根据你的logger名称配置）
            'handlers': ['console', 'file'],  # 同时输出到控制台和文件
            'level': 'DEBUG',  # 调试级别，显示详细日志
            'propagate': False,  # 不向上传播到django日志
        },
    },
}

# settings.py
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",  # 开发环境使用内存通道
        # 生产环境建议使用 Redis 等消息队列:
        # "BACKEND": "channels_redis.core.RedisChannelLayer",
        # "CONFIG": {
        #     "hosts": [("127.0.0.1", 6379)],
        # },
    },
}
# 测试
print("环境变量加载测试:")
print(f"SECRET_KEY: {SERVER_PORT}")